#!/bin/bash

#------------------------------------------------------------------------------
# Setup a Debian-based VPS for remote pair hacking.
#
# It is tested on Ubuntu 12.04.
#------------------------------------------------------------------------------

set -e

USAGE="Usage: ${0##*/} <ip-address> <pair-user-id> [<admin-user-id>]"

source "${BASH_SOURCE%/*}/pairup-helper-functions"

# main() is called at bottom of this file:
main() {
  # "Global" variables we use:
  local root_user=root sudo=
  local ip_address= admin_user= pair_user=

  # Parse command line options:
  get-opts "$@"
  # Make sure our runtime environment is ok:
  setup

  # XXX For now we run the test suite every time:
  tests_ok ||
    die "The pairup test suite is failing. You should look into that."

  # Stage custom scripts in ./PairUp/
  (
    PairUp=./PairUp
    build-config
  )

  # Exit if just testing ./PairUp/
  if [ -n "$PAIRUP_BUILD_ONLY" ]; then
    echo 'Build complete'
    exit
  fi

  # Make script noisy now:
  set -x

  # Set up ssh key for root. May prompt for root password, depending on the
  # server setup. This is the only time you need to enter the password. All
  # pubkey afterwards:
  if [ "$root_user" == root ]; then
    cat "PairUp/user/$admin_user/authorized_keys" | ssh "$root_user@$ip_address" \
      "cat > ak; mkdir -p .ssh; chmod 700 .ssh; mv ak .ssh/authorized_keys"
  fi

  # Copy PairUp dir over to root:
  rsync -avz PairUp/ "$root_user@$ip_address:$PairUp"

  # Run the interactive root script:
  ssh -t "$root_user@$ip_address" $sudo bash "$PairUp/root-setup"

  # Run the interactive admin_user script:
  ssh -t "$admin_user@$ip_address" bash "$PairUp/admin-setup" \
    || true   # Show reconnect msg if the tmux fails

  # \oXo/
  # Now you should be inside a perfectly working tmux session for pairing!
  # \oXo/

  # Tell admin user how to reconnect when they leave tmux session:
  cat PairUp/reconnect
}

# Parse command line args:
get-opts() {
  local args=()

  for arg; do
    case "$arg" in
    -?|-h|--help)
      echo "$Usage"
      exit 0
      ;;
    --HP|-HP|HP)                      # HPCloud (different root model)
      sudo=sudo
      root_user=ubuntu
      ;;
    --BO|-BO|BO)                      # Build Only (testing ./PairUp/)
      PAIRUP_BUILD_ONLY=1
      ;;
    -*)
      die "Unknown option: '$arg'"
      ;;
    *)
      args+=("$arg")
      ;;
    esac
  done

  set -- "${args[@]}"

  if [ $# -lt 2 -o $# -gt 3 ] ||
    [[ ! "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      die "$USAGE"
  fi

  ip_address="$1"
  pair_user="$2"
  admin_user="${3:-$USER}"
}

# cd to the pairup repo directory:
setup() {
  # cd to the pairup repo:
  pairup_bin="$0"
  [[ "$pairup_bin" =~ ^bin/[A-Za-z0-9_-]+$ ]] &&
    pairup_bin="./$pairup_bin"
  [[ "$pairup_bin" =~ .+/bin/[A-Za-z0-9_-]+$ ]] ||
    die "Invalid invocation path: '$pairup_bin'"
  cd ${pairup_bin%/bin/*} ||
    die "Can't cd to pairup repo"

  # Get the repo name to use:
  pairup_repo="$(
    git remote -v |
    grep -E '^origin' |
    head -n1 |
    cut -f2 |
    cut -d ' ' -f1
  )"
  [ -n "$pairup_repo" ] ||
    die "Can't find remote"
  [[ "$pairup_repo" =~ github\.com ]] ||
    die "'$pairup_repo' is bad repo name"
  :
}

# Copy everything the server will need into $PairUp/ and make sure both users
# have a public key:
build-config() {
  # Copy over default and user files:
  rm -fr $PairUp
  cp -r conf $PairUp
  cp -r bin $PairUp/
  mkdir -p $PairUp/user
  cp user/github-users* $PairUp/user/


  # Take the default conf files and append the appropriate user conf files to
  # each one:
  for user in "$admin_user" "$pair_user" private; do
    for file in conf... cpan debian github install known_hosts ssh-config; do
      if [ -e "user/$user/$file" ]; then
        [ "$file" != known_hosts ] &&
          echo -e "\n# $user settings:" >> "$PairUp/$file"
        cat "user/$user/$file" >> "$PairUp/$file"
      fi
    done
    [ "$user" == private ] && continue
    mkdir -p "$PairUp/user/$user"
    [[ -d "user/$user" ]] && [[ -n "$(ls -A "user/$user")" ]] &&
      cp -r user/"$user"/* "$PairUp/user/$user/"
    assert-public-key
  done

  # Render the templates into $PairUp/
  for t in template/*; do
    text=$(< "$t")
    text=${text//%%root_user%%/$root_user}
    text=${text//%%admin_user%%/$admin_user}
    text=${text//%%pair_user%%/$pair_user}
    text=${text//%%pairup_repo%%/$pairup_repo}
    text=${text//%%ip_address%%/$ip_address}
    text=${text//%%time_of_day%%/$(date)}
    echo "$text" > "$PairUp/${t##*/}"
  done
}

# Use the rsa public key under ./user/$user/authorized_keys or attempt to get one
# from GitHub, or error out:
assert-public-key() {
  if [ -e "$PairUp/user/$user/authorized_keys" ] ||
     [ -e "$PairUp/user/$user/authorized_keys2" ]; then
      return
  fi
  if [ -z "$github_user" ]; then
    local github_user="$(
      grep -Esh "^$user:" $PairUp/user/github-users* |
      head -n1 | cut -d: -f2
    )"
    github_user="${github_user:-$user}"
  fi
  keys=()
  curl --silent "https://api.github.com/users/$github_user/keys" |
    grep -E '^    "key": "ssh-rsa' | cut -d'"' -f4 > \
      "$PairUp/user/$user/authorized_keys"
  if [ ! -s "$PairUp/user/$user/authorized_keys" ]; then
    rm "$PairUp/user/$user/authorized_keys"
    if [ ! -s "$PairUp/user/$user/authorized_keys2" ]; then
      curl --silent "https://api.github.com/users/$github_user/keys" |
        grep -E '^    "key": "ssh-dss' | cut -d'"' -f4 > \
          "$PairUp/user/$user/authorized_keys2"
      [ -s "$PairUp/user/$user/authorized_keys2" ] ||
        die "Can't find a public key for user '$user:$github_user'"
    fi
  fi
}

# Start the PairUp server setup:
[ "$0" == "${BASH_SOURCE[0]}" ] && main "$@";:
