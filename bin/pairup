#!/bin/bash

#------------------------------------------------------------------------------
# Setup a Debian-based VPS for remote pair hacking.
#
# It is tested on Ubuntu 12.04.
#------------------------------------------------------------------------------

set -e

USAGE="Usage: ${0##*/} <ip-address> <pair-user-id> [<admin-user-id>]"

die() { echo "$@" >&2; exit 1; }

main() {
  local root_user=root
  local provider= ip_address= admin_user= pair_user= setup_file_name=

  set -x
  get-opts "$@"
  setup
  set +x
  build-config
  set -x

  root-setup
  # Copy Build dir over to root:
  scp -r Build $root_user@$ip_address:
  # Run the interactive root script:
  ssh -t $root_user@$ip_address bash $setup_file_name

  admin-setup
  # Run the interactive admin_user script:
  ssh -t $admin_user@$ip_address bash $setup_file_name

  # Now you should be inside a perfectly working tmux session for pairing.
  # Run the `PairInfo` command and it will tell you what your partner needs.
}

get-opts() {
  local args=()

  for arg; do
    case "$arg" in
    --hp) provider=hpcloud ;;
    --rs) provider=rackspace ;;
    -N)   PAIRUP_NO_SUDO_PASSWORD=1 ;;
    *)    args+=("$arg") ;;
    esac
  done

  set -- "${args[@]}"

  if [ $# -lt 2 -o $# -gt 3 ] ||
    [[ ! "$1" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
      die "$USAGE"
  fi

  ip_address="$1"
  pair_user="$2"
  admin_user="${3:-$USER}"
  setup_file_name='~/pairup-setup.bash'

  [ "$provider" == 'hpcloud' ] &&
    root_user=ubuntu
  :
}

setup() {
  # cd to the pairup repo:
  pairup_bin="$0"
  [[ "$pairup_bin" =~ ^bin/[A-Za-z0-9_-]+$ ]] &&
    pairup_bin="./$pairup_bin"
  [[ "$pairup_bin" =~ .+/bin/[A-Za-z0-9_-]+$ ]] ||
    die "Invalid invocation path: '$pairup_bin'"
  cd ${pairup_bin%/bin/*} ||
    die "Can't cd to pairup repo"

  # Get the repo name to use:
  pairup_repo="$(
    git remote -v |
    grep -E '^origin' |
    head -n1 |
    cut -f2 |
    cut -d ' ' -f1
  )"
  [ -n "$pairup_repo" ] ||
    die "Can't find remote"
  [[ "$pairup_repo" =~ github\.com ]] ||
    die "'$pairup_repo' is bad repo name"
  :
}

#------------------------------------------------------------------------------
# Create local config build:
#------------------------------------------------------------------------------
build-config() {
  # Copy over default and user files:
  rm -fr Build
  cp -r conf Build

  for user in "$admin_user" "$pair_user" private; do
    for file in conf... github-repos known_hosts pre-install post-install ssh-config; do
      if [ -e "user/$user/$file" ]; then
        cat "user/$user/$file" >> "Build/$file"
      fi
    done
  done
}

#------------------------------------------------------------------------------
# Do the 'root' stuff first:
#------------------------------------------------------------------------------
root-setup() {
  # Set up ssh key for root. Needs root password:
  admin_key=user/$admin_user/id_rsa.pub
  if [ ! -e "$admin_key" ]; then
    admin_key=~/.ssh/id_rsa.pub
  fi
  if [ -e "$admin_key" -a "$root_user" == root ]; then
    cat "$admin_key" | ssh "$root_user@$ip_address" \
      "cat > k; mkdir -p .ssh; chmod 700 .ssh; mv k .ssh/authorized_keys"
  fi

  # Copy over known hosts:
  scp Build/known_hosts "$root_user@$ip_address:.ssh/known_hosts"

  # Copy over pair's key if present:
  pair_key="user/$pair_user/id_rsa.pub"
  if [ -e "$pair_key" ]; then
    scp "$pair_key" "$root_user@$ip_address:${pair_user}_key"
  fi

  # Copy this setup script to root's $HOME:
  cat <<... | ssh $root_user@$ip_address "cat > $setup_file_name"
#!/bin/bash

continue?() { echo -c "Error. ctl-c to exit. Enter to continue."; read; }

set -ex

# Remove this script:
rm $setup_file_name

# Add users. sudo for $admin_user:
{
  addgroup admin || continue?
  adduser --gecos '' $admin_user || continue?
  adduser $admin_user admin || continue?
}

# Move the public key over to $admin_user's home:
{
  mkdir -p /home/$admin_user/.ssh
  chmod 700 /home/$admin_user/.ssh
  cp ~/.ssh/authorized_keys /home/$admin_user/.ssh/
  chown -R $admin_user:$admin_user /home/$admin_user/.ssh

  if [ -n "$PAIRUP_NO_SUDO_PASSWORD" ]; then
    echo "ALL ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
  fi
}

# Add pair user:
{
  if [ -f ${pair_user}_key ]; then
    adduser --disabled-password --gecos '' $pair_user || continue?
    mkdir -p /home/$pair_user/.ssh
    chmod 700 /home/$pair_user/.ssh
    mv ${pair_user}_key /home/$pair_user/.ssh/authorized_keys
    chown -R $pair_user:$pair_user /home/$pair_user/.ssh
  else
    adduser --gecos '' $pair_user || continue?
  fi
}

# Get git:
{
  apt-get update --yes
  apt-get install git --yes || continue?

  # Clone this repo, and put the tools in the PATH:
  git clone $pairup_repo pairup || continue?

  # Make a command called 'pairup' to (re)join tmux:
  echo 'tmux -S /tmp/pairup attach || tmux -S /tmp/pairup' > /usr/local/bin/PairUp
  chmod +x /usr/local/bin/PairUp

  # apt-get install requested packages:
  apt-get-install() {
    for pkg; do
      apt-get install --yes "$pkg" || continue?
    done
  }

  # Install requested software:
  source Build/pre-install
}

# TODO scramble root password
...
}

#------------------------------------------------------------------------------
# Now do the 'admin_user' stuff:
#------------------------------------------------------------------------------

admin-setup() {
  # Copy admin files to server:
  {
    # Copy over known_hosts and config to .ssh/:
    scp Build/known_hosts $admin_user@$ip_address:.ssh/known_hosts
    scp Build/ssh-config $admin_user@$ip_address:.ssh/config

    # Copy Build dir over to $admin_user:
    scp -r Build $admin_user@$ip_address:
  }

  # Copy this setup script to $admin_user's $HOME.
  cat <<... | ssh $admin_user@$ip_address "cat > $setup_file_name"
set -ex

# Remove this script:
rm $setup_file_name

# Get this repo remotely
git clone $pairup_repo pairup

# Get other repos of interest
while read repo; do
  [ -z "\$repo" ] && continue
  git clone git@github.com:\$repo src/\${repo#*/} || true
done < Build/github-repos

# Install ... dotfile management setup:
# TODO move from ingydotnet to sharsaw
git clone git@github.com:ingydotnet/....git
mv Build/conf... .../conf
.../... update
.../... install

# Make a little remote script called 'PairInfo'. Run this first thing to get
# your bearings inside the VPS:
cat <<.... > ~/bin/PairInfo
chmod 777 /tmp/pairup

# set -x
# sudo bash Build/post-install &> /tmp/pairup-post-install.log &
# set +x

cat <<.....

Welcome to your new PairUp VPS tmux session!

Tell $pair_user to run this command:

    ssh -t $pair_user@$ip_address PairUp

.....
....
chmod +x ~/bin/PairInfo

# Start tmux with a shared socket:
tmux -S /tmp/pairup

# TODO - Figure out tmux startup script
- MOTD
- post-install
- Split screen, irssi
...
}

main "$@"
